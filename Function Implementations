#include "FoodNode Struct"
void FoodList::addFood(const std::string& name, float protein, float carbs, float fat) {
    FoodNode* newFood = new FoodNode{name, protein, carbs, fat, nullptr};

    if (!head) {
        head = newFood;
    } else {
        FoodNode* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        temp->next = newFood;
    }
}

void FoodList::removeFood(const std::string& name) {
    FoodNode* temp = head, *prev = nullptr;

    while (temp && temp->foodName != name) {
        prev = temp;
        temp = temp->next;
    }

    if (!temp) {
        std::cout << "Food not found!\n";
        return;
    }

    if (!prev) {
        head = temp->next;
    } else {
        prev->next = temp->next;
    }

    delete temp;
}

void FoodList::displayFoods() const {
    FoodNode* temp = head;
    std::cout << std::setw(20) << "Food" << std::setw(10) << "Protein" << std::setw(10) << "Carbs" << std::setw(10) << "Fat\n";
    std::cout << "----------------------------------------------------\n";

    while (temp) {
        std::cout << std::setw(20) << temp->foodName 
                  << std::setw(10) << temp->protein 
                  << std::setw(10) << temp->carbs 
                  << std::setw(10) << temp->fat << "\n";
        temp = temp->next;
    }
}

void FoodList::displayTotals() const {
    float totalProtein = 0, totalCarbs = 0, totalFat = 0;
    FoodNode* temp = head;

    while (temp) {
        totalProtein += temp->protein;
        totalCarbs += temp->carbs;
        totalFat += temp->fat;
        temp = temp->next;
    }

    std::cout << "Total Macronutrients:\n";
    std::cout << "Protein: " << totalProtein << "g\n";
    std::cout << "Carbs: " << totalCarbs << "g\n";
    std::cout << "Fat: " << totalFat << "g\n";
    std::cout << "Calories: " << (totalProtein * 4 + totalCarbs * 4 + totalFat * 9) << " kcal\n";
}

FoodNode* FoodList::searchFood(const std::string& name) const {
    FoodNode* temp = head;
    while (temp) {
        if (temp->foodName == name) {
            std::cout << "Found: " << temp->foodName << " - Protein: " 
                      << temp->protein << "g, Carbs: " << temp->carbs 
                      << "g, Fat: " << temp->fat << "g\n";
            return temp;
        }
        temp = temp->next;
    }
    std::cout << "Food not found!\n";
    return nullptr;
}

void FoodList::saveToFile(const std::string& filename) const {
    std::ofstream file(filename);
    if (!file) {
        std::cerr << "Error opening file for writing!\n";
        return;
    }

    FoodNode* temp = head;
    while (temp) {
        file << temp->foodName << " " << temp->protein << " " << temp->carbs << " " << temp->fat << "\n";
        temp = temp->next;
    }
    file.close();
    std::cout << "Data saved to file successfully.\n";
}

void FoodList::loadFromFile(const std::string& filename) {
    std::ifstream file(filename);
    if (!file) {
        std::cerr << "Error opening file for reading!\n";
        return;
    }

    std::string name;
    float protein, carbs, fat;
    while (file >> name >> protein >> carbs >> fat) {
        addFood(name, protein, carbs, fat);
    }
    file.close();
    std::cout << "Data loaded from file successfully.\n";
}

FoodList::~FoodList() {
    while (head) {
        FoodNode* temp = head;
        head = head->next;
        delete temp;
    }
}
